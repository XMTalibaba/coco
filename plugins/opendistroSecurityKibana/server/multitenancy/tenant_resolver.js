"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveTenant = resolveTenant;
exports.isMultitenantPath = isMultitenantPath;
exports.isValidTenant = isValidTenant;
exports.GLOBAL_TENANTS = exports.PRIVATE_TENANTS = void 0;

var _lodash = require("lodash");

/*
 *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */
const PRIVATE_TENANT_SYMBOL = '__user__';
const GLOBAL_TENANT_SYMBOL = '';
const PRIVATE_TENANTS = [PRIVATE_TENANT_SYMBOL, 'private'];
exports.PRIVATE_TENANTS = PRIVATE_TENANTS;
const GLOBAL_TENANTS = ['global', GLOBAL_TENANT_SYMBOL];
/**
 * Resovles the tenant the user is using.
 *
 * @param request Kibana request.
 * @param config security plugin config.
 * @param cookie cookie extracted from the request. The cookie should have been parsed by AuthenticationHandler.
 * pass it as parameter instead of extracting again.
 * @param authInfo authentication info, the Elasticsearch authinfo API response.
 *
 * @returns user preferred tenant of the request.
 */

exports.GLOBAL_TENANTS = GLOBAL_TENANTS;

function resolveTenant(request, username, availabeTenants, config, cookie) {
  var _config$multitenancy, _config$multitenancy2, _config$multitenancy3;

  let selectedTenant;
  const query = request.url.query;

  if (query && (query.security_tenant || query.securitytenant)) {
    selectedTenant = query.security_tenant ? query.security_tenant : query.securitytenant;
  } else if (request.headers.securitytenant || request.headers.security_tenant) {
    selectedTenant = request.headers.securitytenant ? request.headers.securitytenant : request.headers.security_tenant;
  } else if (isValidTenant(cookie.tenant)) {
    selectedTenant = cookie.tenant;
  } else {
    selectedTenant = undefined;
  }

  const preferredTenants = (_config$multitenancy = config.multitenancy) === null || _config$multitenancy === void 0 ? void 0 : _config$multitenancy.tenants.preferred;
  const globalTenantEnabled = ((_config$multitenancy2 = config.multitenancy) === null || _config$multitenancy2 === void 0 ? void 0 : _config$multitenancy2.tenants.enable_global) || false;
  const privateTenantEnabled = ((_config$multitenancy3 = config.multitenancy) === null || _config$multitenancy3 === void 0 ? void 0 : _config$multitenancy3.tenants.enable_private) || false;
  return resolve(username, selectedTenant, preferredTenants, availabeTenants, globalTenantEnabled, privateTenantEnabled);
}
/**
 * Determines whether the request requires tenant info.
 * @param request kibana request.
 *
 * @returns true if the request requires tenant info, otherwise false.
 */


function isMultitenantPath(request) {
  var _request$url$pathname, _request$url$pathname2, _request$url$pathname3, _request$url$pathname4, _request$url$pathname5;

  return ((_request$url$pathname = request.url.pathname) === null || _request$url$pathname === void 0 ? void 0 : _request$url$pathname.startsWith('/elasticsearch')) || ((_request$url$pathname2 = request.url.pathname) === null || _request$url$pathname2 === void 0 ? void 0 : _request$url$pathname2.startsWith('/api')) || ((_request$url$pathname3 = request.url.pathname) === null || _request$url$pathname3 === void 0 ? void 0 : _request$url$pathname3.startsWith('/app')) || ( // short url path
  (_request$url$pathname4 = request.url.pathname) === null || _request$url$pathname4 === void 0 ? void 0 : _request$url$pathname4.startsWith('/goto')) || // bootstrap.js depends on tenant info to fetch kibana configs in tenant index
  (((_request$url$pathname5 = request.url.pathname) === null || _request$url$pathname5 === void 0 ? void 0 : _request$url$pathname5.indexOf('bootstrap.js')) || -1) > -1 || request.url.pathname === '/';
}

function resolve(username, requestedTenant, preferredTenants, availableTenants, // is an object like { tenant_name_1: true, tenant_name_2: false, ... }
globalTenantEnabled, privateTenantEnabled) {
  const availableTenantsClone = (0, _lodash.cloneDeep)(availableTenants);
  delete availableTenantsClone[username];

  if (!globalTenantEnabled && !privateTenantEnabled && (0, _lodash.isEmpty)(availableTenantsClone)) {
    return undefined;
  }

  if (isValidTenant(requestedTenant)) {
    requestedTenant = requestedTenant;

    if (requestedTenant in availableTenants) {
      return requestedTenant;
    }

    if (privateTenantEnabled && username in availableTenants && PRIVATE_TENANTS.indexOf(requestedTenant) > -1) {
      return PRIVATE_TENANT_SYMBOL;
    }

    if (globalTenantEnabled && GLOBAL_TENANTS.indexOf(requestedTenant) > -1) {
      return GLOBAL_TENANT_SYMBOL;
    }
  }

  if (preferredTenants && !(0, _lodash.isEmpty)(preferredTenants)) {
    for (const element of preferredTenants) {
      const tenant = element.toLowerCase();

      if (globalTenantEnabled && GLOBAL_TENANTS.indexOf(tenant) > -1) {
        return GLOBAL_TENANT_SYMBOL;
      }

      if (privateTenantEnabled && PRIVATE_TENANTS.indexOf(tenant) > -1 && username in availableTenants) {
        return PRIVATE_TENANT_SYMBOL;
      }

      if (tenant in availableTenants) {
        return tenant;
      }
    }
  }

  if (globalTenantEnabled) {
    return GLOBAL_TENANT_SYMBOL;
  }

  if (privateTenantEnabled) {
    return PRIVATE_TENANT_SYMBOL;
  } // fall back to the first tenant in the available tenants


  return (0, _lodash.findKey)(availableTenantsClone, () => true);
}
/**
 * Return true if tenant parameter is a valid tenent.
 *
 * Note: empty string '' is valid, which means global tenant.
 *
 * @param tenant
 */


function isValidTenant(tenant) {
  return tenant !== undefined && tenant !== null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,