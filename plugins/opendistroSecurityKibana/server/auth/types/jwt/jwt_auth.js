"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JwtAuthentication = void 0;

var _authentication_type = require("../authentication_type");

var _routes = require("./routes");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class JwtAuthentication extends _authentication_type.AuthenticationType {
  constructor(config, sessionStorageFactory, router, esClient, coreSetup, logger) {
    var _this$config$jwt;

    super(config, sessionStorageFactory, router, esClient, coreSetup, logger);

    _defineProperty(this, "type", 'jwt');

    _defineProperty(this, "authHeaderName", void 0);

    this.authHeaderName = ((_this$config$jwt = this.config.jwt) === null || _this$config$jwt === void 0 ? void 0 : _this$config$jwt.header.toLowerCase()) || 'authorization';
    this.init();
  }

  async init() {
    const routes = new _routes.JwtAuthRoutes(this.router, this.sessionStorageFactory);
    routes.setupRoutes();
  }

  getTokenFromUrlParam(request) {
    var _this$config$jwt2;

    const urlParamName = (_this$config$jwt2 = this.config.jwt) === null || _this$config$jwt2 === void 0 ? void 0 : _this$config$jwt2.url_param;

    if (urlParamName) {
      const token = request.url.query[urlParamName];
      return token || undefined;
    }

    return undefined;
  }

  getBearerToken(request) {
    const token = this.getTokenFromUrlParam(request);

    if (token) {
      return `Bearer ${token}`;
    } // no token in url parameter, try to get token from header


    return request.headers[this.authHeaderName] || undefined;
  }

  requestIncludesAuthInfo(request) {
    var _this$config$jwt3;

    if (request.headers[this.authHeaderName]) {
      return true;
    }

    const urlParamName = (_this$config$jwt3 = this.config.jwt) === null || _this$config$jwt3 === void 0 ? void 0 : _this$config$jwt3.url_param;

    if (urlParamName && request.url.query[urlParamName]) {
      return true;
    }

    return false;
  }

  getAdditionalAuthHeader(request) {
    const header = {};
    const token = this.getTokenFromUrlParam(request);

    if (token) {
      header[this.authHeaderName] = `Bearer ${token}`;
    }

    return header;
  }

  getCookie(request, authInfo) {
    return {
      username: authInfo.user_name,
      credentials: {
        authHeaderValue: this.getBearerToken(request)
      },
      authType: this.type,
      expiryTime: Date.now() + this.config.session.ttl
    };
  }

  async isValidCookie(cookie) {
    var _cookie$credentials;

    return cookie.authType === this.type && cookie.username && cookie.expiryTime && ((_cookie$credentials = cookie.credentials) === null || _cookie$credentials === void 0 ? void 0 : _cookie$credentials.authHeaderValue);
  }

  handleUnauthedRequest(request, response, toolkit) {
    return response.unauthorized();
  }

  buildAuthHeaderFromCookie(cookie) {
    var _cookie$credentials2;

    const header = {};
    const authHeaderValue = (_cookie$credentials2 = cookie.credentials) === null || _cookie$credentials2 === void 0 ? void 0 : _cookie$credentials2.authHeaderValue;

    if (authHeaderValue) {
      header[this.authHeaderName] = authHeaderValue;
    }

    return header;
  }

}

exports.JwtAuthentication = JwtAuthentication;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,