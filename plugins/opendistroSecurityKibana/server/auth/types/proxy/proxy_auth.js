"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProxyAuthentication = void 0;

var _lodash = require("lodash");

var _routes = require("./routes");

var _authentication_type = require("../authentication_type");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ProxyAuthentication extends _authentication_type.AuthenticationType {
  constructor(config, sessionStorageFactory, router, esClient, coreSetup, logger) {
    var _this$config$proxycac, _this$config$proxycac2, _this$config$proxycac3, _this$config$proxycac4;

    super(config, sessionStorageFactory, router, esClient, coreSetup, logger);

    _defineProperty(this, "type", 'proxy');

    _defineProperty(this, "authType", 'proxycache');

    _defineProperty(this, "userHeaderName", void 0);

    _defineProperty(this, "roleHeaderName", void 0);

    this.userHeaderName = ((_this$config$proxycac = this.config.proxycache) === null || _this$config$proxycac === void 0 ? void 0 : (_this$config$proxycac2 = _this$config$proxycac.user_header) === null || _this$config$proxycac2 === void 0 ? void 0 : _this$config$proxycac2.toLowerCase()) || '';
    this.roleHeaderName = ((_this$config$proxycac3 = this.config.proxycache) === null || _this$config$proxycac3 === void 0 ? void 0 : (_this$config$proxycac4 = _this$config$proxycac3.roles_header) === null || _this$config$proxycac4 === void 0 ? void 0 : _this$config$proxycac4.toLowerCase()) || '';
    this.setupRoutes();
  }

  setupRoutes() {
    const routes = new _routes.ProxyAuthRoutes(this.router, this.config, this.sessionStorageFactory, this.securityClient, this.coreSetup);
    routes.setupRoutes();
  }

  requestIncludesAuthInfo(request) {
    return request.headers[ProxyAuthentication.XFF] && request.headers[this.userHeaderName] ? true : false;
  }

  getAdditionalAuthHeader(request) {
    var _this$config$proxycac5, _this$config$proxycac6;

    const authHeaders = {};
    const customProxyHeader = (_this$config$proxycac5 = this.config.proxycache) === null || _this$config$proxycac5 === void 0 ? void 0 : _this$config$proxycac5.proxy_header;

    if (customProxyHeader && !request.headers[customProxyHeader] && ((_this$config$proxycac6 = this.config.proxycache) === null || _this$config$proxycac6 === void 0 ? void 0 : _this$config$proxycac6.proxy_header_ip)) {
      // TODO: check how to get remoteIp from KibanaRequest and add remoteIp to this header
      authHeaders[customProxyHeader] = this.config.proxycache.proxy_header_ip;
    }

    return authHeaders;
  }

  getCookie(request, authInfo) {
    const cookie = {
      username: authInfo.username,
      credentials: {},
      authType: this.authType,
      isAnonymousAuth: false,
      expiryTime: Date.now() + this.config.session.ttl
    };

    if (this.userHeaderName && request.headers[this.userHeaderName]) {
      cookie.credentials[this.userHeaderName] = request.headers[this.userHeaderName];
    }

    if (this.roleHeaderName && request.headers[this.roleHeaderName]) {
      cookie.credentials[this.roleHeaderName] = request.headers[this.roleHeaderName];
    }

    if (request.headers[ProxyAuthentication.XFF]) {
      cookie.credentials[ProxyAuthentication.XFF] = request.headers[ProxyAuthentication.XFF];
    }

    if (request.headers.authorization) {
      cookie.credentials.authorization = request.headers.authorization;
    }

    return cookie;
  }

  async isValidCookie(cookie) {
    return cookie.authType === this.type && cookie.username && cookie.expiryTime && cookie.credentials[this.userHeaderName];
  }

  handleUnauthedRequest(request, response, toolkit) {
    var _this$config$proxycac7;

    const loginEndpoint = (_this$config$proxycac7 = this.config.proxycache) === null || _this$config$proxycac7 === void 0 ? void 0 : _this$config$proxycac7.login_endpoint;

    if (loginEndpoint) {
      return toolkit.redirected({
        location: loginEndpoint
      });
    } else {
      return toolkit.notHandled(); // TODO: redirect to error page?
    }
  }

  buildAuthHeaderFromCookie(cookie) {
    const authHeaders = {};

    if ((0, _lodash.get)(cookie.credentials, this.userHeaderName)) {
      authHeaders[this.userHeaderName] = cookie.credentials[this.userHeaderName];

      if ((0, _lodash.get)(cookie.credentials, this.roleHeaderName)) {
        authHeaders[this.roleHeaderName] = cookie.credentials[this.roleHeaderName];
      }

      if ((0, _lodash.get)(cookie.credentials, ProxyAuthentication.XFF)) {
        authHeaders[ProxyAuthentication.XFF] = cookie.credentials[ProxyAuthentication.XFF];
      }

      return authHeaders;
    } else if ((0, _lodash.get)(cookie.credentials, 'authorization')) {
      authHeaders.authorization = (0, _lodash.get)(cookie.credentials, 'authorization');
      return authHeaders;
    }
  }

}

exports.ProxyAuthentication = ProxyAuthentication;

_defineProperty(ProxyAuthentication, "XFF", 'x-forwarded-for');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3h5X2F1dGgudHMiXSwibmFtZXMiOlsiUHJveHlBdXRoZW50aWNhdGlvbiIsIkF1dGhlbnRpY2F0aW9uVHlwZSIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwic2Vzc2lvblN0b3JhZ2VGYWN0b3J5Iiwicm91dGVyIiwiZXNDbGllbnQiLCJjb3JlU2V0dXAiLCJsb2dnZXIiLCJ1c2VySGVhZGVyTmFtZSIsInByb3h5Y2FjaGUiLCJ1c2VyX2hlYWRlciIsInRvTG93ZXJDYXNlIiwicm9sZUhlYWRlck5hbWUiLCJyb2xlc19oZWFkZXIiLCJzZXR1cFJvdXRlcyIsInJvdXRlcyIsIlByb3h5QXV0aFJvdXRlcyIsInNlY3VyaXR5Q2xpZW50IiwicmVxdWVzdEluY2x1ZGVzQXV0aEluZm8iLCJyZXF1ZXN0IiwiaGVhZGVycyIsIlhGRiIsImdldEFkZGl0aW9uYWxBdXRoSGVhZGVyIiwiYXV0aEhlYWRlcnMiLCJjdXN0b21Qcm94eUhlYWRlciIsInByb3h5X2hlYWRlciIsInByb3h5X2hlYWRlcl9pcCIsImdldENvb2tpZSIsImF1dGhJbmZvIiwiY29va2llIiwidXNlcm5hbWUiLCJjcmVkZW50aWFscyIsImF1dGhUeXBlIiwiaXNBbm9ueW1vdXNBdXRoIiwiZXhwaXJ5VGltZSIsIkRhdGUiLCJub3ciLCJzZXNzaW9uIiwidHRsIiwiYXV0aG9yaXphdGlvbiIsImlzVmFsaWRDb29raWUiLCJ0eXBlIiwiaGFuZGxlVW5hdXRoZWRSZXF1ZXN0IiwicmVzcG9uc2UiLCJ0b29sa2l0IiwibG9naW5FbmRwb2ludCIsImxvZ2luX2VuZHBvaW50IiwicmVkaXJlY3RlZCIsImxvY2F0aW9uIiwibm90SGFuZGxlZCIsImJ1aWxkQXV0aEhlYWRlckZyb21Db29raWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFlQTs7QUFlQTs7QUFDQTs7OztBQUdPLE1BQU1BLG1CQUFOLFNBQWtDQyx1Q0FBbEMsQ0FBcUQ7QUFVMURDLEVBQUFBLFdBQVcsQ0FDVEMsTUFEUyxFQUVUQyxxQkFG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RGUsTUFBQUEsV0FBVyxDQUFDLEtBQUtmLGNBQU4sQ0FBWCxHQUFtQ3FCLE1BQU0sQ0FBQ0UsV0FBUCxDQUFtQixLQUFLdkIsY0FBeEIsQ0FBbkM7O0FBQ0EsVUFBSSxpQkFBSXFCLE1BQU0sQ0FBQ0UsV0FBWCxFQUF3QixLQUFLbkIsY0FBN0IsQ0FBSixFQUFrRDtBQUNoRFcsUUFBQUEsV0FBVyxDQUFDLEtBQUtYLGNBQU4sQ0FBWCxHQUFtQ2lCLE1BQU0sQ0FBQ0UsV0FBUCxDQUFtQixLQUFLbkIsY0FBeEIsQ0FBbkM7QUFDRDs7QUFDRCxVQUFJLGlCQUFJaUIsTUFBTSxDQUFDRSxXQUFYLEVBQXdCaEMsbUJBQW1CLENBQUNzQixHQUE1QyxDQUFKLEVBQXNEO0FBQ3BERSxRQUFBQSxXQUFXLENBQUN4QixtQkFBbUIsQ0FBQ3NCLEdBQXJCLENBQVgsR0FBdUNRLE1BQU0sQ0FBQ0UsV0FBUCxDQUFtQmhDLG1CQUFtQixDQUFDc0IsR0FBdkMsQ0FBdkM7QUFDRDs7QUFDRCxhQUFPRSxXQUFQO0FBQ0QsS0FURCxNQVNPLElBQUksaUJBQUlNLE1BQU0sQ0FBQ0UsV0FBWCxFQUF3QixlQUF4QixDQUFKLEVBQThDO0FBQ25EUixNQUFBQSxXQUFXLENBQUNnQixhQUFaLEdBQTRCLGlCQUFJVixNQUFNLENBQUNFLFdBQVgsRUFBd0IsZUFBeEIsQ0FBNUI7QUFDQSxhQUFPUixXQUFQO0FBQ0Q7QUFDRjs7QUF4SHlEOzs7O2dCQUEvQ3hCLG1CLFNBQzJCLGlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICAgQ29weXJpZ2h0IDIwMjAgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiAgIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICAgQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogICBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqICAgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqICAgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge1xuICBTZXNzaW9uU3RvcmFnZUZhY3RvcnksXG4gIElSb3V0ZXIsXG4gIElMZWdhY3lDbHVzdGVyQ2xpZW50LFxuICBDb3JlU2V0dXAsXG4gIExvZ2dlcixcbiAgS2liYW5hUmVxdWVzdCxcbiAgTGlmZWN5Y2xlUmVzcG9uc2VGYWN0b3J5LFxuICBBdXRoVG9vbGtpdCxcbiAgSUtpYmFuYVJlc3BvbnNlLFxuICBBdXRoUmVzdWx0LFxufSBmcm9tICdraWJhbmEvc2VydmVyJztcbmltcG9ydCB7IFNlY3VyaXR5UGx1Z2luQ29uZmlnVHlwZSB9IGZyb20gJy4uLy4uLy4uJztcbmltcG9ydCB7IFNlY3VyaXR5U2Vzc2lvbkNvb2tpZSB9IGZyb20gJy4uLy4uLy4uL3Nlc3Npb24vc2VjdXJpdHlfY29va2llJztcbmltcG9ydCB7IFByb3h5QXV0aFJvdXRlcyB9IGZyb20gJy4vcm91dGVzJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uVHlwZSB9IGZyb20gJy4uL2F1dGhlbnRpY2F0aW9uX3R5cGUnO1xuaW1wb3J0IHsgaXNWYWxpZFRlbmFudCB9IGZyb20gJy4uLy4uLy4uL211bHRpdGVuYW5jeS90ZW5hbnRfcmVzb2x2ZXInO1xuXG5leHBvcnQgY2xhc3MgUHJveHlBdXRoZW50aWNhdGlvbiBleHRlbmRzIEF1dGhlbnRpY2F0aW9uVHlwZSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFhGRjogc3RyaW5nID0gJ3gtZm9yd2FyZGVkLWZvcic7XG5cbiAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdwcm94eSc7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBhdXRoVHlwZTogc3RyaW5nID0gJ3Byb3h5Y2FjaGUnO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgdXNlckhlYWRlck5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSByb2xlSGVhZGVyTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbmZpZzogU2VjdXJpdHlQbHVnaW5Db25maWdUeXBlLFxuICAgIHNlc3Npb25TdG9yYWdlRmFjdG9yeTogU2Vzc2lvblN0b3JhZ2VGYWN0b3J5PFNlY3VyaXR5U2Vzc2lvbkNvb2tpZT4sXG4gICAgcm91dGVyOiBJUm91dGVyLFxuICAgIGVzQ2xpZW50OiBJTGVnYWN5Q2x1c3RlckNsaWVudCxcbiAgICBjb3JlU2V0dXA6IENvcmVTZXR1cCxcbiAgICBsb2dnZXI6IExvZ2dlclxuICApIHtcbiAgICBzdXBlcihjb25maWcsIHNlc3Npb25TdG9yYWdlRmFjdG9yeSwgcm91dGVyLCBlc0NsaWVudCwgY29yZVNldHVwLCBsb2dnZXIpO1xuXG4gICAgdGhpcy51c2VySGVhZGVyTmFtZSA9IHRoaXMuY29uZmlnLnByb3h5Y2FjaGU/LnVzZXJfaGVhZGVyPy50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuICAgIHRoaXMucm9sZUhlYWRlck5hbWUgPSB0aGlzLmNvbmZpZy5wcm94eWNhY2hlPy5yb2xlc19oZWFkZXI/LnRvTG93ZXJDYXNlKCkgfHwgJyc7XG5cbiAgICB0aGlzLnNldHVwUm91dGVzKCk7XG4gIH1cblxuICBwcml2YXRlIHNldHVwUm91dGVzKCkge1xuICAgIGNvbnN0IHJvdXRlcyA9IG5ldyBQcm94eUF1dGhSb3V0ZXMoXG4gICAgICB0aGlzLnJvdXRlcixcbiAgICAgIHRoaXMuY29uZmlnLFxuICAgICAgdGhpcy5zZXNzaW9uU3RvcmFnZUZhY3RvcnksXG4gICAgICB0aGlzLnNlY3VyaXR5Q2xpZW50LFxuICAgICAgdGhpcy5jb3JlU2V0dXBcbiAgICApO1xuICAgIHJvdXRlcy5zZXR1cFJvdXRlcygpO1xuICB9XG5cbiAgcmVxdWVzdEluY2x1ZGVzQXV0aEluZm8ocmVxdWVzdDogS2liYW5hUmVxdWVzdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiByZXF1ZXN0LmhlYWRlcnNbUHJveHlBdXRoZW50aWNhdGlvbi5YRkZdICYmIHJlcXVlc3QuaGVhZGVyc1t0aGlzLnVzZXJIZWFkZXJOYW1lXVxuICAgICAgPyB0cnVlXG4gICAgICA6IGZhbHNlO1xuICB9XG5cbiAgZ2V0QWRkaXRpb25hbEF1dGhIZWFkZXIocmVxdWVzdDogS2liYW5hUmVxdWVzdCk6IGFueSB7XG4gICAgY29uc3QgYXV0aEhlYWRlcnM6IGFueSA9IHt9O1xuICAgIGNvbnN0IGN1c3RvbVByb3h5SGVhZGVyID0gdGhpcy5jb25maWcucHJveHljYWNoZT8ucHJveHlfaGVhZGVyO1xuICAgIGlmIChcbiAgICAgIGN1c3RvbVByb3h5SGVhZGVyICYmXG4gICAgICAhcmVxdWVzdC5oZWFkZXJzW2N1c3RvbVByb3h5SGVhZGVyXSAmJlxuICAgICAgdGhpcy5jb25maWcucHJveHljYWNoZT8ucHJveHlfaGVhZGVyX2lwXG4gICAgKSB7XG4gICAgICAvLyBUT0RPOiBjaGVjayBob3cgdG8gZ2V0IHJlbW90ZUlwIGZyb20gS2liYW5hUmVxdWVzdCBhbmQgYWRkIHJlbW90ZUlwIHRvIHRoaXMgaGVhZGVyXG4gICAgICBhdXRoSGVhZGVyc1tjdXN0b21Qcm94eUhlYWRlcl0gPSB0aGlzLmNvbmZpZy5wcm94eWNhY2hlIS5wcm94eV9oZWFkZXJfaXA7XG4gICAgfVxuICAgIHJldHVybiBhdXRoSGVhZGVycztcbiAgfVxuXG4gIGdldENvb2tpZShyZXF1ZXN0OiBLaWJhbmFSZXF1ZXN0LCBhdXRoSW5mbzogYW55KTogU2VjdXJpdHlTZXNzaW9uQ29va2llIHtcbiAgICBjb25zdCBjb29raWU6IFNlY3VyaXR5U2Vzc2lvbkNvb2tpZSA9IHtcbiAgICAgIHVzZXJuYW1lOiBhdXRoSW5mby51c2VybmFtZSxcbiAgICAgIGNyZWRlbnRpYWxzOiB7fSxcbiAgICAgIGF1dGhUeXBlOiB0aGlzLmF1dGhUeXBlLFxuICAgICAgaXNBbm9ueW1vdXNBdXRoOiBmYWxzZSxcbiAgICAgIGV4cGlyeVRpbWU6IERhdGUubm93KCkgKyB0aGlzLmNvbmZpZy5zZXNzaW9uLnR0bCxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMudXNlckhlYWRlck5hbWUgJiYgcmVxdWVzdC5oZWFkZXJzW3RoaXMudXNlckhlYWRlck5hbWVdKSB7XG4gICAgICBjb29raWUuY3JlZGVudGlhbHNbdGhpcy51c2VySGVhZGVyTmFtZV0gPSByZXF1ZXN0LmhlYWRlcnNbdGhpcy51c2VySGVhZGVyTmFtZV07XG4gICAgfVxuICAgIGlmICh0aGlzLnJvbGVIZWFkZXJOYW1lICYmIHJlcXVlc3QuaGVhZGVyc1t0aGlzLnJvbGVIZWFkZXJOYW1lXSkge1xuICAgICAgY29va2llLmNyZWRlbnRpYWxzW3RoaXMucm9sZUhlYWRlck5hbWVdID0gcmVxdWVzdC5oZWFkZXJzW3RoaXMucm9sZUhlYWRlck5hbWVdO1xuICAgIH1cbiAgICBpZiAocmVxdWVzdC5oZWFkZXJzW1Byb3h5QXV0aGVudGljYXRpb24uWEZGXSkge1xuICAgICAgY29va2llLmNyZWRlbnRpYWxzW1Byb3h5QXV0aGVudGljYXRpb24uWEZGXSA9IHJlcXVlc3QuaGVhZGVyc1tQcm94eUF1dGhlbnRpY2F0aW9uLlhGRl07XG4gICAgfVxuICAgIGlmIChyZXF1ZXN0LmhlYWRlcnMuYXV0aG9yaXphdGlvbikge1xuICAgICAgY29va2llLmNyZWRlbnRpYWxzLmF1dGhvcml6YXRpb24gPSByZXF1ZXN0LmhlYWRlcnMuYXV0aG9yaXphdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGNvb2tpZTtcbiAgfVxuXG4gIGFzeW5jIGlzVmFsaWRDb29raWUoY29va2llOiBTZWN1cml0eVNlc3Npb25Db29raWUpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gKFxuICAgICAgY29va2llLmF1dGhUeXBlID09PSB0aGlzLnR5cGUgJiZcbiAgICAgIGNvb2tpZS51c2VybmFtZSAmJlxuICAgICAgY29va2llLmV4cGlyeVRpbWUgJiZcbiAgICAgIGNvb2tpZS5jcmVkZW50aWFsc1t0aGlzLnVzZXJIZWFkZXJOYW1lXVxuICAgICk7XG4gIH1cblxuICBoYW5kbGVVbmF1dGhlZFJlcXVlc3QoXG4gICAgcmVxdWVzdDogS2liYW5hUmVxdWVzdCxcbiAgICByZXNwb25zZTogTGlmZWN5Y2xlUmVzcG9uc2VGYWN0b3J5LFxuICAgIHRvb2xraXQ6IEF1dGhUb29sa2l0XG4gICk6IElLaWJhbmFSZXNwb25zZSB8IEF1dGhSZXN1bHQge1xuICAgIGNvbnN0IGxvZ2luRW5kcG9pbnQgPSB0aGlzLmNvbmZpZy5wcm94eWNhY2hlPy5sb2dpbl9lbmRwb2ludDtcbiAgICBpZiAobG9naW5FbmRwb2ludCkge1xuICAgICAgcmV0dXJuIHRvb2xraXQucmVkaXJlY3RlZCh7XG4gICAgICAgIGxvY2F0aW9uOiBsb2dpbkVuZHBvaW50LFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0b29sa2l0Lm5vdEhhbmRsZWQoKTsgLy8gVE9ETzogcmVkaXJlY3QgdG8gZXJyb3IgcGFnZT9cbiAgICB9XG4gIH1cblxuICBidWlsZEF1dGhIZWFkZXJGcm9tQ29va2llKGNvb2tpZTogU2VjdXJpdHlTZXNzaW9uQ29va2llKTogYW55IHtcbiAgICBjb25zdCBhdXRoSGVhZGVyczogYW55ID0ge307XG4gICAgaWYgKGdldChjb29raWUuY3JlZGVudGlhbHMsIHRoaXMudXNlckhlYWRlck5hbWUpKSB7XG4gICAgICBhdXRoSGVhZGVyc1t0aGlzLnVzZXJIZWFkZXJOYW1lXSA9IGNvb2tpZS5jcmVkZW50aWFsc1t0aGlzLnVzZXJIZWFkZXJOYW1lXTtcbiAgICAgIGlmIChnZXQoY29va2llLmNyZWRlbnRpYWxzLCB0aGlzLnJvbGVIZWFkZXJOYW1lKSkge1xuICAgICAgICBhdXRoSGVhZGVyc1t0aGlzLnJvbGVIZWFkZXJOYW1lXSA9IGNvb2tpZS5jcmVkZW50aWFsc1t0aGlzLnJvbGVIZWFkZXJOYW1lXTtcbiAgICAgIH1cbiAgICAgIGlmIChnZXQoY29va2llLmNyZWRlbnRpYWxzLCBQcm94eUF1dGhlbnRpY2F0aW9uLlhGRikpIHtcbiAgICAgICAgYXV0aEhlYWRlcnNbUHJveHlBdXRoZW50aWNhdGlvbi5YRkZdID0gY29va2llLmNyZWRlbnRpYWxzW1Byb3h5QXV0aGVudGljYXRpb24uWEZGXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdXRoSGVhZGVycztcbiAgICB9IGVsc2UgaWYgKGdldChjb29raWUuY3JlZGVudGlhbHMsICdhdXRob3JpemF0aW9uJykpIHtcbiAgICAgIGF1dGhIZWFkZXJzLmF1dGhvcml6YXRpb24gPSBnZXQoY29va2llLmNyZWRlbnRpYWxzLCAnYXV0aG9yaXphdGlvbicpO1xuICAgICAgcmV0dXJuIGF1dGhIZWFkZXJzO1xuICAgIH1cbiAgfVxufVxuIl19