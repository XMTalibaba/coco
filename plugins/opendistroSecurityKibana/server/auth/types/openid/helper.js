"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseTokenResponse = parseTokenResponse;
exports.getBaseRedirectUrl = getBaseRedirectUrl;
exports.callTokenEndpoint = callTokenEndpoint;
exports.composeLogoutUrl = composeLogoutUrl;

var _querystring = require("querystring");

/*
 *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */
function parseTokenResponse(payload) {
  const payloadString = payload.toString();

  if (payloadString.trim()[0] === '{') {
    try {
      return JSON.parse(payloadString);
    } catch (error) {
      throw Error(`Invalid JSON payload: ${error}`);
    }
  }

  return (0, _querystring.parse)(payloadString);
}

function getBaseRedirectUrl(config, core) {
  var _config$openid;

  if ((_config$openid = config.openid) === null || _config$openid === void 0 ? void 0 : _config$openid.base_redirect_url) {
    const baseRedirectUrl = config.openid.base_redirect_url;
    return baseRedirectUrl.endsWith('/') ? baseRedirectUrl.slice(0, -1) : baseRedirectUrl;
  }

  const host = core.http.getServerInfo().hostname;
  const port = core.http.getServerInfo().port;
  const protocol = core.http.getServerInfo().protocol;

  if (core.http.basePath.serverBasePath) {
    return `${protocol}://${host}:${port}${core.http.basePath.serverBasePath}`;
  }

  return `${protocol}://${host}:${port}`;
}

async function callTokenEndpoint(tokenEndpoint, query, wreckClient) {
  var _tokenResponse$res;

  const tokenResponse = await wreckClient.post(tokenEndpoint, {
    payload: (0, _querystring.stringify)(query),
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    }
  });

  if (!((_tokenResponse$res = tokenResponse.res) === null || _tokenResponse$res === void 0 ? void 0 : _tokenResponse$res.statusCode) || tokenResponse.res.statusCode < 200 || tokenResponse.res.statusCode > 299) {
    throw new Error(`Failed calling token endpoint: ${tokenResponse.res.statusCode} ${tokenResponse.res.statusMessage}`);
  }

  const tokenPayload = parseTokenResponse(tokenResponse.payload);
  return {
    idToken: tokenPayload.id_token,
    accessToken: tokenPayload.access_token,
    refreshToken: tokenPayload.refresh_token,
    expiresIn: tokenPayload.expires_in
  };
}

function composeLogoutUrl(customLogoutUrl, idpEndsessionEndpoint, additionalQueryParams) {
  const logoutEndpont = customLogoutUrl || idpEndsessionEndpoint;
  const logoutUrl = new URL(logoutEndpont);
  Object.keys(additionalQueryParams).forEach(key => {
    logoutUrl.searchParams.append(key, additionalQueryParams[key]);
  });
  return logoutUrl.toString();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlci50cyJdLCJuYW1lcyI6WyJwYXJzZVRva2VuUmVzcG9uc2UiLCJwYXlsb2FkIiwicGF5bG9hZFN0cmluZyIsInRvU3RyaW5nIiwidHJpbSIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwiRXJyb3IiLCJnZXRCYXNlUmVkaXJlY3RVcmwiLCJjb25maWciLCJjb3JlIiwib3BlbmlkIiwiYmFzZV9yZWRpcmVjdF91cmwiLCJiYXNlUmVkaXJlY3RVcmwiLCJlbmRzV2l0aCIsInNsaWNlIiwiaG9zdCIsImh0dHAiLCJnZXRTZXJ2ZXJJbmZvIiwiaG9zdG5hbWUiLCJwb3J0IiwicHJvdG9jb2wiLCJiYXNlUGF0aCIsInNlcnZlckJhc2VQYXRoIiwiY2FsbFRva2VuRW5kcG9pbnQiLCJ0b2tlbkVuZHBvaW50IiwicXVlcnkiLCJ3cmVja0NsaWVudCIsInRva2VuUmVzcG9uc2UiLCJwb3N0IiwiaGVhZGVycyIsInJlcyIsInN0YXR1c0NvZGUiLCJzdGF0dXNNZXNzYWdlIiwidG9rZW5QYXlsb2FkIiwiaWRUb2tlbiIsImlkX3Rva2VuIiwiYWNjZXNzVG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJyZWZyZXNoX3Rva2VuIiwiZXhwaXJlc0luIiwiZXhwaXJlc19pbiIsImNvbXBvc2VMb2dvdXRVcmwiLCJjdXN0b21Mb2dvdXRVcmwiLCJpZHBFbmRzZXNzaW9uRW5kcG9pbnQiLCJhZGRpdGlvbmFsUXVlcnlQYXJhbXMiLCJsb2dvdXRFbmRwb250IiwibG9nb3V0VXJsIiwiVVJMIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZWFyY2hQYXJhbXMiLCJhcHBlbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFnQkE7O0FBaEJBOzs7Ozs7Ozs7Ozs7OztBQW9CTyxTQUFTQSxrQkFBVCxDQUE0QkMsT0FBNUIsRUFBNkM7QUFDbEQsUUFBTUMsYUFBYSxHQUFHRCxPQUFPLENBQUNFLFFBQVIsRUFBdEI7O0FBQ0EsTUFBSUQsYUFB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QyxJQUFQLENBQVlMLHFCQUFaLEVBQW1DTSxPQUFuQyxDQUE0Q0MsR0FBRCxJQUFTO0FBQ2xETCxJQUFBQSxTQUFTLENBQUNNLFlBQVYsQ0FBdUJDLE1BQXZCLENBQThCRixHQUE5QixFQUFtQ1AscUJBQXFCLENBQUNPLEdBQUQsQ0FBeEQ7QUFDRCxHQUZEO0FBR0EsU0FBT0wsU0FBUyxDQUFDOUMsUUFBVixFQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogICBDb3B5cmlnaHQgMjAyMCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqICAgWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogICBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICAgb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiAgIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogICBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogICBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHdyZWNrIGZyb20gJ0BoYXBpL3dyZWNrJztcbmltcG9ydCB7IHBhcnNlLCBzdHJpbmdpZnkgfSBmcm9tICdxdWVyeXN0cmluZyc7XG5pbXBvcnQgeyBDb3JlU2V0dXAgfSBmcm9tICdraWJhbmEvc2VydmVyJztcbmltcG9ydCB7IFNlY3VyaXR5UGx1Z2luQ29uZmlnVHlwZSB9IGZyb20gJy4uLy4uLy4uJztcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVG9rZW5SZXNwb25zZShwYXlsb2FkOiBCdWZmZXIpIHtcbiAgY29uc3QgcGF5bG9hZFN0cmluZyA9IHBheWxvYWQudG9TdHJpbmcoKTtcbiAgaWYgKHBheWxvYWRTdHJpbmcudHJpbSgpWzBdID09PSAneycpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocGF5bG9hZFN0cmluZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IEVycm9yKGBJbnZhbGlkIEpTT04gcGF5bG9hZDogJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcnNlKHBheWxvYWRTdHJpbmcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFzZVJlZGlyZWN0VXJsKGNvbmZpZzogU2VjdXJpdHlQbHVnaW5Db25maWdUeXBlLCBjb3JlOiBDb3JlU2V0dXApOiBzdHJpbmcge1xuICBpZiAoY29uZmlnLm9wZW5pZD8uYmFzZV9yZWRpcmVjdF91cmwpIHtcbiAgICBjb25zdCBiYXNlUmVkaXJlY3RVcmwgPSBjb25maWcub3BlbmlkLmJhc2VfcmVkaXJlY3RfdXJsO1xuICAgIHJldHVybiBiYXNlUmVkaXJlY3RVcmwuZW5kc1dpdGgoJy8nKSA/IGJhc2VSZWRpcmVjdFVybC5zbGljZSgwLCAtMSkgOiBiYXNlUmVkaXJlY3RVcmw7XG4gIH1cblxuICBjb25zdCBob3N0ID0gY29yZS5odHRwLmdldFNlcnZlckluZm8oKS5ob3N0bmFtZTtcbiAgY29uc3QgcG9ydCA9IGNvcmUuaHR0cC5nZXRTZXJ2ZXJJbmZvKCkucG9ydDtcbiAgY29uc3QgcHJvdG9jb2wgPSBjb3JlLmh0dHAuZ2V0U2VydmVySW5mbygpLnByb3RvY29sO1xuICBpZiAoY29yZS5odHRwLmJhc2VQYXRoLnNlcnZlckJhc2VQYXRoKSB7XG4gICAgcmV0dXJuIGAke3Byb3RvY29sfTovLyR7aG9zdH06JHtwb3J0fSR7Y29yZS5odHRwLmJhc2VQYXRoLnNlcnZlckJhc2VQYXRofWA7XG4gIH1cbiAgcmV0dXJuIGAke3Byb3RvY29sfTovLyR7aG9zdH06JHtwb3J0fWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYWxsVG9rZW5FbmRwb2ludChcbiAgdG9rZW5FbmRwb2ludDogc3RyaW5nLFxuICBxdWVyeTogYW55LFxuICB3cmVja0NsaWVudDogdHlwZW9mIHdyZWNrXG4pOiBQcm9taXNlPFRva2VuUmVzcG9uc2U+IHtcbiAgY29uc3QgdG9rZW5SZXNwb25zZSA9IGF3YWl0IHdyZWNrQ2xpZW50LnBvc3QodG9rZW5FbmRwb2ludCwge1xuICAgIHBheWxvYWQ6IHN0cmluZ2lmeShxdWVyeSksXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgIH0sXG4gIH0pO1xuICBpZiAoXG4gICAgIXRva2VuUmVzcG9uc2UucmVzPy5zdGF0dXNDb2RlIHx8XG4gICAgdG9rZW5SZXNwb25zZS5yZXMuc3RhdHVzQ29kZSA8IDIwMCB8fFxuICAgIHRva2VuUmVzcG9uc2UucmVzLnN0YXR1c0NvZGUgPiAyOTlcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEZhaWxlZCBjYWxsaW5nIHRva2VuIGVuZHBvaW50OiAke3Rva2VuUmVzcG9uc2UucmVzLnN0YXR1c0NvZGV9ICR7dG9rZW5SZXNwb25zZS5yZXMuc3RhdHVzTWVzc2FnZX1gXG4gICAgKTtcbiAgfVxuICBjb25zdCB0b2tlblBheWxvYWQ6IGFueSA9IHBhcnNlVG9rZW5SZXNwb25zZSh0b2tlblJlc3BvbnNlLnBheWxvYWQgYXMgQnVmZmVyKTtcbiAgcmV0dXJuIHtcbiAgICBpZFRva2VuOiB0b2tlblBheWxvYWQuaWRfdG9rZW4sXG4gICAgYWNjZXNzVG9rZW46IHRva2VuUGF5bG9hZC5hY2Nlc3NfdG9rZW4sXG4gICAgcmVmcmVzaFRva2VuOiB0b2tlblBheWxvYWQucmVmcmVzaF90b2tlbixcbiAgICBleHBpcmVzSW46IHRva2VuUGF5bG9hZC5leHBpcmVzX2luLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZUxvZ291dFVybChcbiAgY3VzdG9tTG9nb3V0VXJsOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGlkcEVuZHNlc3Npb25FbmRwb2ludDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBhZGRpdGlvbmFsUXVlcnlQYXJhbXM6IGFueVxuKSB7XG4gIGNvbnN0IGxvZ291dEVuZHBvbnQgPSBjdXN0b21Mb2dvdXRVcmwgfHwgaWRwRW5kc2Vzc2lvbkVuZHBvaW50O1xuICBjb25zdCBsb2dvdXRVcmwgPSBuZXcgVVJMKGxvZ291dEVuZHBvbnQhKTtcbiAgT2JqZWN0LmtleXMoYWRkaXRpb25hbFF1ZXJ5UGFyYW1zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBsb2dvdXRVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIGFkZGl0aW9uYWxRdWVyeVBhcmFtc1trZXldIGFzIHN0cmluZyk7XG4gIH0pO1xuICByZXR1cm4gbG9nb3V0VXJsLnRvU3RyaW5nKCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9rZW5SZXNwb25zZSB7XG4gIGlkVG9rZW4/OiBzdHJpbmc7XG4gIGFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuICByZWZyZXNoVG9rZW4/OiBzdHJpbmc7XG4gIGV4cGlyZXNJbj86IG51bWJlcjtcbn1cbiJdfQ==