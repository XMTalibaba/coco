"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpendistroSecurityPlugin = void 0;

var _operators = require("rxjs/operators");

var _routes = require("./routes");

var _opendistro_security_configuration_plugin = _interopRequireDefault(require("./backend/opendistro_security_configuration_plugin"));

var _opendistro_security_plugin = _interopRequireDefault(require("./backend/opendistro_security_plugin"));

var _security_cookie = require("./session/security_cookie");

var _opendistro_security_client = require("./backend/opendistro_security_client");

var _tenant_index = require("./multitenancy/tenant_index");

var _auth_handler_factory = require("./auth/auth_handler_factory");

var _routes2 = require("./multitenancy/routes");

var _auth_type_routes = require("./routes/auth_type_routes");

var _core = require("../../../src/core/server/saved_objects/migrations/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class OpendistroSecurityPlugin {
  // FIXME: keep an reference of admin client so that it can be used in start(), better to figureout a
  //        decent way to get adminClient in start. (maybe using getStartServices() from setup?)
  // @ts-ignore: property not initialzied in constructor
  constructor(initializerContext) {
    this.initializerContext = initializerContext;

    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "securityClient", void 0);

    this.logger = initializerContext.logger.get();
  }

  async setup(core) {
    var _config$multitenancy;

    this.logger.debug('opendistro_security: Setup');
    const config$ = this.initializerContext.config.create();
    const config = await config$.pipe((0, _operators.first)()).toPromise();
    const router = core.http.createRouter();
    const esClient = core.elasticsearch.legacy.createClient('opendistro_security', {
      plugins: [_opendistro_security_configuration_plugin.default, _opendistro_security_plugin.default]
    });
    this.securityClient = new _opendistro_security_client.SecurityClient(esClient);
    const securitySessionStorageFactory = await core.http.createCookieSessionStorageFactory((0, _security_cookie.getSecurityCookieOptions)(config)); // put logger into route handler context, so that we don't need to pass througth parameters

    core.http.registerRouteHandlerContext('security_plugin', (context, request) => {
      return {
        logger: this.logger,
        esClient
      };
    }); // setup auth

    const auth = (0, _auth_handler_factory.getAuthenticationHandler)(config.auth.type, router, config, core, esClient, securitySessionStorageFactory, this.logger);
    core.http.registerAuth(auth.authHandler); // Register server side APIs

    (0, _routes.defineRoutes)(router);
    (0, _auth_type_routes.defineAuthTypeRoutes)(router, config); // set up multi-tenent routes

    if ((_config$multitenancy = config.multitenancy) === null || _config$multitenancy === void 0 ? void 0 : _config$multitenancy.enabled) {
      (0, _routes2.setupMultitenantRoutes)(router, securitySessionStorageFactory, this.securityClient);
    }

    return {
      config$,
      securityConfigClient: esClient
    };
  } // TODO: add more logs


  async start(core) {
    var _config$multitenancy2;

    this.logger.debug('opendistro_security: Started');
    const config$ = this.initializerContext.config.create();
    const config = await config$.pipe((0, _operators.first)()).toPromise();

    if ((_config$multitenancy2 = config.multitenancy) === null || _config$multitenancy2 === void 0 ? void 0 : _config$multitenancy2.enabled) {
      const globalConfig$ = this.initializerContext.config.legacy.globalConfig$;
      const globalConfig = await globalConfig$.pipe((0, _operators.first)()).toPromise();
      const kibanaIndex = globalConfig.kibana.index;
      const typeRegistry = core.savedObjects.getTypeRegistry();
      const esClient = core.elasticsearch.client.asInternalUser;
      const migrationClient = (0, _core.createMigrationEsClient)(esClient, this.logger);
      (0, _tenant_index.setupIndexTemplate)(esClient, kibanaIndex, typeRegistry, this.logger);
      const serializer = core.savedObjects.createSerializer();
      const kibanaVersion = this.initializerContext.env.packageInfo.version;
      (0, _tenant_index.migrateTenantIndices)(kibanaVersion, migrationClient, this.securityClient, typeRegistry, serializer, this.logger);
    }

    return {
      es: core.elasticsearch.legacy
    };
  }

  stop() {}

}

exports.OpendistroSecurityPlugin = OpendistroSecurityPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,